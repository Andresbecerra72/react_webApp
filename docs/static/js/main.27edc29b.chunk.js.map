{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifts","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAKVC,mBAAS,IALC,mBAKvCC,EALuC,KAK3BC,EAL2B,KAkC9C,OACI,aADK,CACL,QAAMC,SApBW,SAACC,GAElBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAYlB,SAEI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAhCmB,SAACP,GAGxBF,EAAcE,EAAEQ,OAAOF,aA6C/BZ,EAAYe,WAAa,CACrBd,cAAee,IAAUC,KAAKC,Y,mCCvDrBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAIbC,EAJa,gDAImCC,UAAUH,GAJ7C,+DAKAI,MAAOF,GALP,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE3B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAkBZM,GAlBY,4CAAH,sDCFPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAU,yCAAf,UAEG,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAKA,QCJHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCb,SAAEA,GAAe,IAAD,EAEdlB,mBAAS,CAE/ByB,KAAM,GACNa,SAAS,IAL2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyCxC,OA5BAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GAGHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMtB,CAAEpB,IAeEqB,EDtC2BK,CAAc1B,GAAlCa,EAJuB,EAI7BN,KAAca,EAJe,EAIfA,QAmBtB,OACI,qCACC,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAErD,sBAAKgB,UAAU,YAAf,UAICI,GAAW,mBAAGJ,UAAU,mCAAb,wBAKRH,EAAOJ,KAAK,SAAAC,GAAG,OAEL,cAAC,EAAD,eAEKA,GADCA,EAAIC,cElCnBgB,EAAe,WAAM,MAGM7C,mBAAS,CAAC,SAHhB,mBAGvB8C,EAHuB,KAGX/C,EAHW,KAiB9B,OACI,cADK,CACL,sBAEI,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEK+C,EAAWnB,KAAI,SAAAT,GAAQ,OAEnB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCnC3B6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.27edc29b.chunk.js","sourcesContent":["\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\n// funcion del componente\nexport const AddCategory = ({ setCategories }) => {\n\n    \n\n\n    const [inputValue, setinputValue] = useState('');\n\n    // handle del texto que ingresa en el input\n    const handleInputCahange = (e) => {\n\n        // e.target.value: es el evento del componente Input\n        setinputValue(e.target.value); // renderiza el Input\n    }\n\n    // handle del input cuando se realiza un enter\n    const handleSubmit = (e) => {\n\n        e.preventDefault(); // evita el comportamiento del form cuando intenta recargar nuevamente la pagina\n\n        // validacion del Input\n        if ( inputValue.trim().length > 2) {\n\n            setCategories(cats => [inputValue, ...cats]);\n            setinputValue(''); // limpia el Input\n            \n        }\n       \n\n\n    }\n\n\n\n    // --------retorno del componente----------------\n    return ( // fragment <> se retorna un componente completo\n        <form onSubmit={ handleSubmit }>\n\n            <input \n            type=\"text\"\n            value={ inputValue }\n            onChange={ handleInputCahange }\n            />\n\n        </form>\n\n\n    )\n\n\n\n\n} // End Component\n\n\n\n// PropTypes\nAddCategory.protoTypes = { // hace obligatorio el uso de la funcion setCategories en el componente\n    setCategories: PropTypes.func.isRequired\n}","\n\n\n\n\n\n// funcion que consulta el API de GIPHY\n// estafuncion al ser ASYNC devuelve una promesa\nexport const getGift = async(category) => {\n\n    // encodeURI() es una funcion que escapa los espacios\n\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=ClvBt8X8PmQoUrP9vO4mmjTPUMDQ0Htm`;\n    const resp = await fetch( url );\n    const { data } = await resp.json(); // se usa la desestructuracion para recibir solo la data\n\n    const gifts = data.map( img => { // solo trae la informacion necesaria del API\n\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    // console.log(gifts); \n   \n    return gifts;\n\n}","\nimport React from 'react'\n\n\n\n// en la funcion se usa desestructuracion por que viene el objeto img\nexport const GifGridItem = ( {id, title, url} ) => {\n    \n    \n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n\n           <img src={url} alt={ title }/>\n           <p>{ title }</p>\n            \n        </div>\n    )\n}// End Component\n","import React from 'react'\n\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n//import { getGift } from '../helpers/GetGifs';\n\n\n\n\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([])\n\n    const { data: images, loading } = useFetchGifs( category );\n    // data: images se pueden renombrar los parametros en la desestructuracion\n\n    // console.log(data);\n\n\n    // useEffect es usado para disparar la consulta al API una sola ves,\n    // se debe enviar el segundo arguemento '[]' \n    // useEffect(() =>{\n    //     getGift(category) // llama la funcion de helpers/GetGifs.js\n    //         .then( setImages );\n    // }, [ category ]);\n\n\n\n\n\n\n    // -------retorno del componente----------------\n    return (\n        <>\n         <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>  \n\n        <div className=\"card-grid\">\n\n        { /*loading? 'Cargando...': 'Data OK'; */} \n\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\n\n        { \n        \n            images.map( img => ( \n\n                      <GifGridItem \n                      key={ img.id }\n                      { ...img } // se envia un clone del Objeto img\n                    //   img={ img }\n                      />\n\n                       ))\n            \n                }\n        </div>\n          \n                \n            \n\n        </>\n    )\n}// End Component\n","\nimport { useEffect, useState } from \"react\";\nimport { getGift } from \"../helpers/GetGifs\";\n\n// Un hook solo es una funcion \n/*\n   CUSTOM HOOK\n*/\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n\n        data: [],\n        loading: true\n\n    })\n\n\n\n    // useEffect es usado para disparar la consulta al API una sola ves,\n    // se debe enviar el segundo arguemento '[]' \n    useEffect(() =>{\n        getGift(category) // llama la funcion de helpers/GetGifs.js\n            .then( imgs => {\n\n             \n                setState({\n                    data: imgs,\n                    loading: false\n                })\n          \n\n\n            } );\n    }, [ category ]);\n\n\n    // setTimeout(() => {\n        \n    //     setState({\n\n    //         data: [1,2,3,4,5],\n    //         loading: false\n    \n    //     });\n\n    // }, 3000);\n\n\n    return state;\n\n\n\n\n\n    \n}\n","\n\n// snipped para crear el componente \"rafc\"\n\nimport React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\n// no se pueden usar const cuando queremos cambiar el valor\n// las const no son mutables, se usan 'useState'\n//const categories = ['Hola', 'como', 'estas'];\n\n\n\n\nexport const GifExpertApp = () => {\n\n    // los useState deben estar dentro del componente\n    const [categories, setCategories] = useState(['Rock']);\n    // setCategories: este parametro sirve para renderizar el componente\n    // y que se actulice nuevamente el componente\n\n    // const handled = () => {\n\n    //     //console.log('AQUI');\n    //     setCategories([...categories, 'Aqui']); // esta funcion cambia todos los datos del useState\n    //     console.log(categories);\n\n    // }\n\n\n// ------------retorna el componente HTML-----------------------------\n    return ( // <> fragment\n        <> \n\n            <h1>GiftExpertApp</h1>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n            <ol>\n             {\n                 categories.map(category => (\n\n                     <GifGrid\n                     key={ category } \n                     category={ category }\n                      />\n                 ))\n             }\n\n            </ol>\n\n            \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}